name: build

on:
  push:

jobs:
  build:
    name: build-${{ matrix.os }}-ghc-${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        ghc:
          - 9.6.1
    steps:
      - run: sudo apt install ccache llvm ninja-build
        if: startsWith(matrix.os, 'ubuntu-')

      - run: |
          brew install ccache ninja
          pushd $(mktemp -d)
            ln -s $(brew --prefix llvm)/bin/llvm-ar
            echo $PWD >> $GITHUB_PATH
          popd
        if: startsWith(matrix.os, 'macos-')

      - uses: haskell/actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}

      - uses: actions/checkout@v3

      - run: git submodule update --init --depth 1

      - uses: actions/cache@v3
        with:
          path: ~/.cache/ccache
          key: 0-ccache-ubuntu-latest-${{ github.run_id }}
          restore-keys: |
            0-ccache-ubuntu-latest
        if: startsWith(matrix.os, 'ubuntu-')

      - uses: actions/cache@v3
        with:
          path: ~/Library/Caches/ccache
          key: 0-ccache-macos-latest-${{ github.run_id }}
          restore-keys: |
            0-ccache-macos-latest
        if: startsWith(matrix.os, 'macos-')

      - run: |
          pushd node
          CC="ccache cc" CXX="ccache c++" ./configure --enable-lto --enable-static --experimental-enable-pointer-compression --ninja --verbose
          popd
          ninja -v -C node/out/Release

      - run: |
          pushd node
          make -j3 test || true
          popd

      - run: ./et.mjs

      - run: |
          pushd node
          git clean -xdf
          CC="ccache cc" CXX="ccache c++" ./configure --enable-lto --experimental-enable-pointer-compression --ninja --shared --verbose
          popd
          ninja -v -C node/out/Release

      - run: |
          pushd node
          make -j3 test || true
          popd

      - run: |
          if [ "$(uname -s)" = "Linux" ]
          then
            DLL=so
          else
            DLL=dylib
          fi

          ghc --version
          cabal --version
          cp node/out/Release/$(./parse_config_gypi.py | jq -r .variables.libdir)/libnode.$(./parse_config_gypi.py | jq -r .variables.shlib_suffix) node/out/Release/libshoggoth.$DLL
          echo :q | ghci -v node/out/Release/libshoggoth.$DLL

      - run: ccache --recompress 19
